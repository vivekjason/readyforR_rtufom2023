{"title":"Introduction to R","markdown":{"yaml":{"title":"Introduction to R","author":"Vivek Jason","format":{"html":{"theme":"simplex","toc":true,"toc_float":true}},"editor":"visual"},"headingText":"Assumptions and pre-requisites","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(magrittr)\nlibrary(zoo)\n```\n\n![](images/intro.png){fig-align=\"center\"}\n\n\nThe first section of this workshop is four hours long- and as you can imagine that is very short. While, we do not assume a significant background in statistics we assume you:\n\n1.  You know the **basics** of computing environments\n\n-   You have access to a computing environment (i.e. locally on a laptop or working in the cloud)\n\n-   You generally feel comfortable with installing and working with software\n\n2.  You know the **basics** of statistics\n\n-   The central dogma (estimates, standard errors, basic distributions, etc.)\n\n-   Key statistical terms and methods\n\n-   Differences between estimation vs testing vs prediction\n\n-   Know how to fit and interpret **basic** statistical models (e.g. linear models)\n\nWhile we will be covering very briefly some basic of R and setting up your environment, we will not be able to spend significant time covering these concepts and technologies. Data analyses you will perform will also often involve significant data extraction, cleaning, and transformation. We will learn about tools to do all of this, but hopefully most of this sounds familiar to you so you can focus on the concepts we will be teaching around best practices for statistical computing.\n\n::: callout-tip\nSome resources that may be useful if you feel you may be missing pieces of this background:\n\n-   **Statistics** - [Mathematical Biostatistics Bootcamp I (Coursera)](https://www.coursera.org/learn/biostatistics); [Mathematical Biostatistics Bootcamp II (Coursera)](https://www.coursera.org/learn/biostatistics-2)\n-   **Basic Data Science** - [R for Data Science)](https://r4ds.had.co.nz/); [Data Science Specialization (Coursera)](https://www.coursera.org/specializations/jhu-data-science)\n-   **Rmarkdown** - [Rmarkdown introduction](https://rmarkdown.rstudio.com/lesson-1.html)\n:::\n\n### Getting set up\n\nYou must install [R](https://cran.r-project.org) and [RStudio](https://rstudio.com) on your computing environment in order to complete this workshop. We assume you have already setup your environment (you have been emailed instructions last week).\n\nHowever if you have not, here is a quick recap:\n\nThese are two **different** applications that must be installed separately before they can be used together:\n\n-   R is the core underlying programming language and computing engine that we will be learning in this course\n\n-   RStudio is an interface into R that makes many aspects of using and programming R simpler\n\nBoth R and RStudio are available for Windows, macOS, and most flavors of Unix and Linux. Please download the version that is suitable for your computing setup.\n\n#### How to Download R for Windows\n\nGo to [https://cran.r-project.org]() and\n\n1.  Click the link to \"Download R for Windows\"\n\n2.  Click on \"base\"\n\n3.  Click on \"Download R 4.2.1 for Windows\"\n\n::: callout-warning\nThe version in the video is not the latest version of R. Please download the latest version.\n:::\n\n![Video Demo for Downloading R for Windows](/videos/downloadRWindows.gif){alt=\"Video Demo for Downloading R for Windows\"}\n\n#### How to Download R for the Mac\n\nGoto [https://cran.r-project.org]() and\n\n1.  Click the link to \"Download R for (Mac) OS X\".\n\n2.  Click on \"R-4.2.1.pkg\"\n\n::: callout-warning\nThe version in the video is not the latest version of R. Please download the latest version.\n:::\n\n![Video Demo for Downloading R for the Mac](/videos/downloadRMac.gif){alt=\"Video Demo for Downloading R for the Mac\"}\n\n#### How to Download RStudio\n\nGoto [https://rstudio.com]() and\n\n1.  Click on \"Products\" in the top menu\n\n2.  Then click on \"RStudio\" in the drop down menu\n\n3.  Click on \"RStudio Desktop\"\n\n4.  Click the button that says \"DOWNLOAD RSTUDIO DESKTOP\"\n\n5.  Click the button under \"RStudio Desktop\" Free\n\n6.  Under the section \"All Installers\" choose the file that is appropriate for your operating system.\n\n::: callout-warning\nNOTE: The video shows how to download RStudio for the Mac but you should download RStudio for whatever computing setup you have\n:::\n\n![Video Demo for Downloading RStudio](/videos/downloadRStudio.gif){alt=\"Video Demo for Downloading RStudio\" width=\"80%\"}\n\n#### Download the Tidyverse package\n\nThroughout the course, we will make use of numerous R add-on packages that must be installed over the Internet. Packages can be installed using the `install.packages()` function in R. For example, to install the `tidyverse` package, you can run\n\n```{r}\n#| eval: false\ninstall.packages(\"tidyverse\")\n```\n\n### Learning Objectives\n\nThe goal is by the end of the workshop, students will be able to:\n\n1.  Install and configure software necessary for a statistical programming environment\n\n2.  Write and debug code in base R and the tidyverse\n\n3.  Build basic data visualizations using R and the tidyverse\n\n4.  Run statistical tests in the R programme\n\n### What will we learn in the next half hour?\n\n-   Some backround on R\n\n-   Understanding R and RStudio\n\n-   Grammar of R\n\n-   Taking the next step\n\n### What is...\n\n```{r, echo=FALSE}\n# Define variable containing url\nurl <- \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Eo_circle_light-blue_white_letter-r.svg/1200px-Eo_circle_light-blue_white_letter-r.svg.png\"\n```\n\n<center>![](%60r%20url%60){style=\"height: 200px\"}</center>\n\n-   a software package for statistical computing and graphics\n\n-   a collection of 18,636packages (as of September 2020)!\n\n-   a (not ideal) programming language\n\n-   a work environment, widely used, POWERFUL!\n\n### Why use R\n\n-   It's free!\n\n-   It runs on a variety of platforms including Windows, Unix and MacOS.\n\n-   It provides an unparalleled platform for programming new statistical methods in an easy and straightforward manner.\n\n-   It contains advanced statistical routines not yet available in other packages.\n\n-   It has state-of-the-art graphics capabilities\n\n-   The next step for open-science initiatives chief being reproducibility\n\n#### A note on reproducibility\n\n-   Replication, whereby scientific questions are examined and verified independently by different scientists, is the gold standard for scientific validity.\n\n-   Replication can be difficult and often there are no resources to independently replicate a study.\n\n-   Reproducibility, whereby data and code are re-analyzed by independent scientists to obtain the same results of the original investigator, is a reasonable minimum standard when replication is not possible.\n\n### Reproducibility and Literate Programming\n\nOne basic idea to make writing reproducible reports easier is what's known as *literate statistical programming* (or sometimes called [literate statistical practice](http://www.r-project.org/conferences/DSC-2001/Proceedings/Rossini.pdf)). This comes from the idea of [literate programming](https://en.wikipedia.org/wiki/Literate_programming) in the area of writing computer programs.\n\nThe idea is to **think of a report or a publication as a stream of text and code**.\n\n-   The text is readable by people and the code is readable by computers.\n\n-   The analysis is described in a series of text and code chunks.\n\n-   Each kind of code chunk will do something like load some data or compute some results.\n\n-   Each text chunk will relay something in a human readable language.\n\nThere might also be **presentation code** that formats tables and figures and there's article text that explains what's going on around all this code. This stream of text and code is a literate statistical program or a literate statistical analysis.\n\n### CRAN:Comprehensive R Archive Network\n\nAt a higher level one \"limitation\" of R is that its functionality is based on consumer demand and (voluntary) user contributions. If no one feels like implementing your favorite method, then it's your job to implement it (or you need to pay someone to do it). The capabilities of the R system generally reflect the interests of the R user community. As the community has ballooned in size over the past 10 years, the capabilities have similarly increased. This can be seen in the exponential increase in packages on CRAN\n\n```{r, include=FALSE, warning=FALSE}\ncran <- read_html(\"https://cran.r-project.org/web/packages/available_packages_by_date.html\") %>% \n  html_table() %>%\n  extract2(1) %>% as.data.frame() %>%\n  mutate(Date=as.Date(Date)) %>%\n  group_by(Date) %>%\n  count(Date) %>% ungroup() %>%\n  mutate(package=cumsum(n)) %>%\n  rename(date=Date)\n```\n\n```{r, warning=FALSE}\nggplot(cran, aes(x=date)) +\n  geom_line(aes(y=package), col=\"navy\",size=1.1) +\n  geom_point(aes(y=package), col=\"goldenrod2\", size=0.05) +\n  scale_y_continuous(name = \"Number (n)\") +\n  theme_minimal() +\n  theme(legend.position = c(.7, .07),\n        legend.justification = c(\"right\", \"bottom\"),\n        legend.box.just = \"right\",\n        legend.box.background=element_rect(color = NA, fill = NA),\n        legend.background=element_rect(color = NA, fill = NA),\n        legend.key = element_rect(color=NA, fill = NA),\n        legend.margin = margin(6, 6, 6, 6),\n        legend.title = element_text(size = 24),\n        legend.text = element_text(size = 20,face=\"plain\"),\n        panel.grid.major.x=element_blank(),\n        panel.grid.minor.x = element_blank(),\n        plot.title = element_text(size=12),\n        axis.ticks.x = element_line(color = \"grey40\", \n                                    size = 1, linetype = \"solid\"),\n        axis.title.x = element_text(size=24),\n        axis.text.x      = element_text(size=20),\n        axis.ticks.y.left = element_line(color = \"grey50\", \n                                    size = 1, linetype = \"solid\"),\n        axis.title.y.left    = element_text(size=24, color=\"grey50\"),\n        axis.text.y.left      = element_text(size=20, color=\"grey50\"),\n        axis.line.y.left = element_line(color = \"grey50\"),\n        axis.ticks.y.right = element_line(color = \"firebrick2\", \n                                    size = 1, linetype = \"solid\")) +\n  scale_x_date(date_breaks = \"3 year\", date_minor_breaks = \"1 day\",\n               date_labels = \"%b %y\",\n               expand=c(0,0)) +\n  labs(x = \"Date\")\n```\n\n### History time\n\n-   S was developed at Bell Labs, starting in the 1970s\n\n-   R was created in the 1990s by Ross Ihaka and Robert Gentleman\n\n-   R was based on S, with code written in C\n\n-   S largely was used to make good graphs -- not an easy thing in 1975. R, like S, is quite good for graphing\n\n    ![](/images/posit.png)\n\n### Design of the R System\n\nThe primary R system is available from the [Comprehensive R Archive Network](http://cran.r-project.org), also known as CRAN. CRAN also hosts many add-on packages that can be used to extend the functionality of R.\n\nThe R system is divided into 2 conceptual parts:\n\n1.  The \"base\" R system that you download from CRAN:\n\n-   [Linux](http://cran.r-project.org/bin/linux/)\n\n-   [Windows](http://cran.r-project.org/bin/windows/)\n\n-   [Mac](http://cran.r-project.org/bin/macosx/)\n\n2.  Everything else.\n\nR functionality is divided into a number of *packages*.\n\n-   The \"base\" R system contains, among other things, the `base` package which is required to run R and contains the most fundamental functions.\n\n-   The other packages contained in the \"base\" system include `utils`, `stats`, `datasets`, `graphics`, `grDevices`, `grid`, `methods`, `tools`, `parallel`, `compiler`, `splines`, `tcltk`, `stats4`.\n\n-   There are also \"Recommended\" packages: `boot`, `class`, `cluster`, `codetools`, `foreign`, `KernSmooth`, `lattice`, `mgcv`, `nlme`, `rpart`, `survival`, `MASS`, `spatial`, `nnet`, `Matrix`.\n\nWhen you download a fresh installation of R from CRAN, you get all of the above, which represents a substantial amount of functionality. However, there are many other packages available:\n\n-   There are over 10,000 packages on CRAN that have been developed by users and programmers around the world.\n\n-   There are also many packages associated with the [Bioconductor project](http://bioconductor.org).\n\n-   People often make packages available on their personal websites; there is no reliable way to keep track of how many packages are available in this fashion.\n\n### At its core R is a programming language\n\n-   Concepts such as loops and functions speed up and simplify analytic processes\n\n-   If you want R to be (relatively) fast, take advantage of vector operations; e.g., use the replicate command (rather than a loop) or the apply function.\n\n-   optimising computation is critical to newer processes i.e. big data\n\n### R is object oriented\n\n-   e.g., MyModel \\<- lm(wt \\~ ht, data = mydata)\n\n-   then hist(MyModel\\$residuals)\n\n-   Note that lm(wt \\~ ht\\*age + log(bp), data = mydata) regresses wt on ht, age, the ht-by-age interaction, and log(bp)\n\n-   There is no need to create the interaction or the log(bp) variable outside of the lm() command\n\n-   another e.g.\n\n-   mod1 \\<- lm(wt \\~ ht\\*age + log(bp), data = mydata)\n\n-   mod2 \\<- lm(wt \\~ ht + log(bp), data = mydata)\n\n-   anova(mod2, mod1) gives a nested/ interaction F-test\n\n### Limitations\n\n-   fresh non-coders may find it difficult at first , the curve is steep especially if you have no background\n\n-   hundreds of packages mean learning 100s of different things and styles - analysis is much more transient\n\n-   SPSS, STATA use a much more ordered approach - fresh non-coders may find it difficult at first\n\n-   generally a intepreted language (vs compiled), this makes certain operations clunky and slow like looping\n\n    ![](/images/steep_curve.jpg)\n\nNonetheless The R paradigm is different- its uses a more iterative approach and as such analysis is more flexible, makes a more in depth inquiry of data Mastery is key to tapping the potential of data science in real-world and research settings The first key to mastery of R is....\n\n**UNINSTALL SPSS** AS.. QUICKLY.. AS.. YOU.. CAN!!\n\n![](/images/uninstall.png){fig-align=\"center\"}\n\n### Rstudio\n\n-   An Integrated Development Environment (IDE) for R\n-   A gift, from J.J. Allaire (Macalester College, '91) to the world\n-   An easy (easier) way to use R\n-   Available as a desktop product or, run off a server or cloud\n-   Recently renamed as Posit- to include Python, VS and Quatro\n-   Free to a degree!\n\n```{r, echo=FALSE}\n# Define variable containing url\nurl <- \"https://d33wubrfki0l68.cloudfront.net/f567102197110696f30ee8983050ecdb994adf8c/59526/blog/rstudio-is-becoming-posit/thumbnail_hub4076432a9bd62034697fb6bf5e4d30a_143092_2220x0_resize_q75_box.jpg\"\n```\n\n<center>![](%60r%20url%60){style=\"height: 100px\"}</center>\n\n### RStudio environment\n\n![](/images/rstudio.png){fig-align=\"center\"}\n\n### Setting a working directory\n\nCheck you working directory by\n\n```{r, eval=FALSE}\ngetwd()\n```\n\nYou can then set your working directory like this\n\n```{r, eval=FALSE}\nsetwd(\"C:\\Users\\VivekJason\\RTraining\\introduction\")\n```\n\n::: callout-warning\n## Setting a work directory like this is called an absolute path and in statistical computing is a frowned upon practice as it locks directories to you system only. Instead we should utilise relative paths.\n:::\n\nA relative path should look like this\n\n```{r, eval=FALSE}\nsetwd(\"../data\")\n```\n\nThere are even better practices for sustainability and reproducibility such but we wont cover those practices here. You can find more information in this [post](https://www.tidyverse.org/articles/2017/12/workflow-vs-script/)\n\n### Reading data into R\n\nThis section demonstrates the fundamental functions required to read and write data in R.\n\nIn base R, there are key functions for reading data:\n\n-   read.table() & read.csv(): used for reading tabular data\n\n-   readLines(): used for reading lines from a text file\n\nCorresponding functions exist for writing data:\n\n-   write.table(): used to write tabular data to text files or connections, such as CSV\n\n-   writeLines(): used to write character data line-by-line to a file or connection\n\nLet's attempt to read data into R using the read.csv() function.\n\n```{r, eval=FALSE, echo=TRUE}\ndf <- read.csv(\"data/yourfilename.csv\")#this is just an example\n```\n\nYou can even pull a csv straight from the web\n\n```{r, warning=FALSE, echo=TRUE}\ndf <- read.csv(\"https://raw.githubusercontent.com/MoH-Malaysia/data-darah-public/main/newdonors_state.csv\")\n```\n\nYou can export he above csv to you computer by\n\n```{r, eval=FALSE}\nwrite.csv(df, \"blood_donor_malaysia.csv\")\n```\n\nTo extract a specific column, we can use the \\$ symbol:\n\n```{r, echo=TRUE}\ndf$hospital\n```\n\nAlmost all imaginable formats can be imported/ exported into R. For a more in depth explanation you can have a look at this [book chapter.](https://datasciencebook.ca/reading.html)\n\n### Base R Grammar\n\n-   Results of calculations can be stored in objects using the assignment operators: An arrow (\\<-) formed by a smaller than character and a hyphen without a space! The equal character (=).\n\n-   Object names cannot contain \\`strange' symbols like !, +, -, #.\n\n-   A dot (.) and an underscore ( ) are allowed, also a name starting with a dot.\n\n-   Object names can contain a number but cannot start with a number.\n\n-   R is case sensitive, X and x are two different objects, as well as temp and temP.\n\n#### Lets do some coding\n\nSimple calculations\n\n```{r, echo=TRUE}\n5\n```\n\n```{r, echo=TRUE}\n2+5\n```\n\n```{r, echo=TRUE}\nlog(5)\n```\n\n#### Storing objects\n\nStore a number\n\n```{r, echo=TRUE}\nx <- 2\nx\n```\n\nTry it with =\n\n```{r, echo=TRUE}\nx=2\nx\n```\n\nSame results\n\nStore an object\n\n```{r, echo=TRUE}\nx <- \"Hello\"\nx\n```\n\nStore a string of numbers\n\n```{r, echo=TRUE}\nx <- c(1:10)\nx\n```\n\nCheck the string and subset some values based on criteria\n\n```{r, echo=TRUE}\nx>8\n```\n\n```{r, echo=TRUE}\nx < 5\n```\n\n```{r, echo=TRUE}\nx[(x>8) | (x<5)]\n```\n\n#### Vectors\n\nWrite a vector of weights\n\n```{r, echo=TRUE}\nweight <- c(55, 67, 99, 87, 62, 45, 32, 6, 22, 88)\n```\n\nSubset the third value\n\n```{r, echo=TRUE}\nweight[3]\n```\n\nSubset the 4th to 6th value\n\n```{r, echo=TRUE}\nweight[4:6]\n```\n\nDefine another vector of weights\n\n```{r, echo=TRUE}\nheight <- c(123, 165, 187, 201, 152, 157, 134, 23, 91, 197)\n```\n\nEstimate a BMI\n\n```{r, echo=TRUE}\nbmi <- weight/((height/100)^2)\nbmi\n```\n\n#### Descriptive of the vector\n\n```{r, echo=TRUE}\nlength(height)\n```\n\n```{r, echo=TRUE}\nmean (weight)\n```\n\n```{r, echo=TRUE}\nvar(height)\n```\n\n#### Matrices\n\nDefine a new vector\n\n```{r, echo=TRUE}\nobs <- 1:10\n```\n\nJoin them into a matrix\n\n```{r, echo=TRUE}\nm <- cbind(obs, height, weight, bmi)\n```\n\nDescribe the matrix\n\n```{r, echo=TRUE}\ntypeof(m)\n```\n\n```{r, echo=TRUE}\nclass(m)\n```\n\n```{r, echo=TRUE}\nis.matrix(m)\n```\n\n```{r, echo=TRUE}\ndim(m)\n```\n\n#### Quick and dirty plots in base R\n\n```{r, echo=TRUE}\nxplot <- plot(height, weight, ylab=\"Weight\", xlab=\"Height\")\n```\n\n```{r, echo=TRUE}\nxplot\n```\n\n#### Dataframes\n\nConvert the earlier matrix into a df\n\n```{r, echo=TRUE}\ndf <- as.data.frame(m)\n```\n\nCheck the column names\n\n```{r, echo=TRUE}\nnames(df)\n```\n\nSummarise the columns\n\n```{r, echo=TRUE}\nsummary(df)\n```\n\n#### Some other importannt grammar\n\n-   ls() lists all the function objects in the environment\n\n```{r, echo=TRUE, eval=FALSE}\nls()\n```\n\n-   rm() removes a particular function, rm(list=ls()) empties the environment\n\n```{r, echo=TRUE}\nrm(x)\n```\n\n### Special characters\n\n-   NA: Not Available (i.e. missing values)\n\n-   NaN: Not a Number (e.g. 0/0)\n\n-   Inf: Infinity\n\n-   -Inf: Minus Infinity.\n\nFor instance 0 divided by 0 gives a NaN, but 1 divided by 0 gives Inf.\n\n#### There are many ways to skin a cat in R\n\n![](images/cat.jpg){fig-align=\"center\"}\n\nFor instance\n\n```{r, echo=TRUE}\nmean(df$height) \n```\n\nOr\n\n```{r, echo=TRUE}\nwith(df, mean(height))\n```\n\nOr\n\n```{r, echo=TRUE}\nmean(height, data=df)\n```\n\nOr for a plot you could\n\n```{r, echo=TRUE}\nplot(df$height,df$weight)\n```\n\nor\n\n```{r, echo=TRUE}\nwith(df, plot(height,weight)) \n```\n\nor\n\n```{r, echo=TRUE}\nplot(weight~height, data=df)\n```\n\nOf course not every thing will work\n\n```{r, echo=TRUE}\nplot(height, weight, data=df)\n```\n\n### A word on the tidyverse\n\n-   The tidyr and dplyr packages handle SQL-ytpe work: merging files, extracting subsets, etc.\n\n```{r, echo=TRUE, eval=FALSE}\n#install tidyerse\ninstall.packages(\"tidyverse\")\n\n#load dtidyverse\nlibrary(tidyverse)\n\n#wranggle data\nsub_df <- df %>% filter(bmi>20) %>% \n  mutate(BMI=bmi*bmi)#takes a sample of size 5000, extracts only the rows for which age > 18, and saves the result in newNCHS\n\n```\n\nThe tidyverse framework is **AMAZING** and we will focus on utilising this framework for the remainder of this workshop.\n\n::: callout-tip\n-   Nobody remembers everything\n\n-   First thing to check is CRAN- look for documentation of package\n\n-   type ? in console\n\n-   Stackoverflow, Rstudio forum etc\n\n-   REMEMBER R IS ALL ABOUT COMMUNITY\n:::\n\n### Acknowledgements\n\nMaterial for this lecture was borrowed and adopted from\n\n-   <https://stephaniehicks.com/jhustatcomputing2022/>\n\n-   <https://rafalab.github.io/dsbook>\n\n-   <https://rmd4sci.njtierney.com>\n\n### Additional Resources\n\n::: callout-tip\n1)  Programming in R\n\n-   [An Introduction to R Complete introduction to base R](https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf)\n\n-   [R for Data Science Introduction to data analysis using R](http://r4ds.had.co.nz/)\n\n-   [Advanced R In-depth discussion of programming in R](https://adv-r.hadley.nz/)\n\n2)  Data viz in R\n\n-   [Data Visualization](http://socviz.co/)\n\n-   [Elegant Graphics for Data Analysis](http://moderngraphics11.pbworks.com/f/ggplot2-Book09hWickham.pdf)\n\n3)  Extensions to R\n\n-   [Programming interactive R-apps using Shiny](https://shiny.rstudio.com/articles/)\n\n-   [R markdown Integrate code and output into typeset documents and slide](https://rmarkdown.rstudio.com/lesson-1.html)\n\n-   [RStudio Cheat Sheets Cheatsheets for numerous packages](https://www.rstudio.com/resources/cheatsheets/).\n:::\n\n## \n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"introduction.html"},"language":{"code-summary":"Show the solution"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.189","editor":"visual","theme":"simplex","title":"Introduction to R","author":"Vivek Jason","toc_float":true},"extensions":{"book":{"multiFile":true}}}}}